// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users & Profiles
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  displayName String
  role        UserRole @default(USER)
  status      UserStatus @default(ACTIVE)
  isKid       Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  profile     Profile?
  kidProfile  KidProfile?
  guardianLinks ChildGuardianLink[] @relation("Guardian")
  childLinks  ChildGuardianLink[] @relation("Child")
  ageGateLogs AgeGateLog[]
  
  // Social
  sentFriendships     Friendship[] @relation("Requester")
  receivedFriendships Friendship[] @relation("Addressee")
  sentMessages        Message[]
  conversations       Conversation[] @relation("CreatedBy")
  conversationMembers ConversationMember[]
  callRooms          CallRoom[] @relation("CreatedBy")
  callParticipants   CallParticipant[]
  
  // Follow/Tune-In
  sentTuneIns         TuneIn[] @relation("Follower")
  receivedTuneIns     TuneIn[] @relation("Followed")
  
  // Video Interactions
  videoBoosts         VideoBoost[]
  videoChats          VideoChat[]
  
  // Notifications
  notifications       Notification[]
  
  // Content
  studio     Studio?
  videos     Video[]
  collections Collection[]
  collectionItems CollectionItem[]
  
  // Store & Wallet
  store      Store?
  products   Product[]
  orders     Order[] @relation("Buyer")
  wallet     Wallet?
  transactions Transaction[]
  
  // Admin
  reports    Report[] @relation("Reporter")
  bans       Ban[]
  
  // Auth
  magicLinkTokens MagicLinkToken[]
  
  // Video Editor
  videoProjects VideoProject[]
  
  // Console Integration
  consoleIntegrations ConsoleIntegration[]
  
  @@map("users")
}

enum UserRole {
  USER
  CREATOR
  ADMIN
  OWNER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
}

model Profile {
  id           String   @id @default(cuid())
  userId       String   @unique
  bio          String?
  fonts        String?
  palette      String?
  wallpaperUrl String?
  musicUrl     String?
  photoAlbums  Json?
  links        Json?
  history      Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model KidProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  nickName      String
  guardianEmail String
  age           Int
  learningPrefs Json?
  safeContacts  Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("kid_profiles")
}

model ChildGuardianLink {
  id            String   @id @default(cuid())
  kidUserId     String
  guardianUserId String
  status        GuardianLinkStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  kid     User @relation("Child", fields: [kidUserId], references: [id], onDelete: Cascade)
  guardian User @relation("Guardian", fields: [guardianUserId], references: [id], onDelete: Cascade)

  @@unique([kidUserId, guardianUserId])
  @@map("child_guardian_links")
}

enum GuardianLinkStatus {
  PENDING
  APPROVED
  REJECTED
}

model AgeGateLog {
  id       String   @id @default(cuid())
  userId   String
  decision AgeGateDecision
  detail   String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("age_gate_logs")
}

enum AgeGateDecision {
  ALLOWED
  BLOCKED
  GUARDIAN_REQUIRED
}

// Social Features
model Friendship {
  id           String   @id @default(cuid())
  requesterId  String
  addresseeId  String
  status       FriendshipStatus @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  requester User @relation("Requester", fields: [requesterId], references: [id], onDelete: Cascade)
  addressee User @relation("Addressee", fields: [addresseeId], references: [id], onDelete: Cascade)

  @@unique([requesterId, addresseeId])
  @@map("friendships")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model Conversation {
  id        String   @id @default(cuid())
  type      ConversationType
  title     String?
  createdById String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User @relation("CreatedBy", fields: [createdById], references: [id])
  members   ConversationMember[]
  messages  Message[]
  callRooms CallRoom[]

  @@map("conversations")
}

enum ConversationType {
  DM
  GROUP
  KID
}

model ConversationMember {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_members")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  text           String?
  mediaUrl       String?
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model CallRoom {
  id             String   @id @default(cuid())
  conversationId String
  livekitRoom    String?
  createdById    String
  startedAt      DateTime @default(now())
  endedAt        DateTime?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdBy    User         @relation("CreatedBy", fields: [createdById], references: [id])
  participants CallParticipant[]

  @@map("call_rooms")
}

model CallParticipant {
  id        String   @id @default(cuid())
  callRoomId String
  userId    String
  joinedAt  DateTime @default(now())
  leftAt    DateTime?

  callRoom CallRoom @relation(fields: [callRoomId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([callRoomId, userId])
  @@map("call_participants")
}

// Content & Studios
model Studio {
  id        String   @id @default(cuid())
  ownerId   String   @unique
  name      String
  handle    String   @unique
  bannerUrl String?
  about     String?
  isCreator Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  videos    Video[]
  store     Store?
  membershipTiers MembershipTier[]
  memberships Membership[]

  @@map("studios")
}

model Video {
  id          String   @id @default(cuid())
  studioId    String
  title       String
  description String?
  status      VideoStatus @default(DRAFT)
  visibility  VideoVisibility @default(PUBLIC)
  duration    Int?
  views       Int      @default(0)
  boosts      Int      @default(0)
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  studio     Studio        @relation(fields: [studioId], references: [id], onDelete: Cascade)
  assets     VideoAsset[]
  collectionItems CollectionItem[]
  boosts     VideoBoost[]
  chats      VideoChat[]

  @@map("videos")
}

enum VideoStatus {
  DRAFT
  PROCESSING
  READY
  BLOCKED
}

enum VideoVisibility {
  PUBLIC
  CREW
  PRIVATE
}

model VideoAsset {
  id            String   @id @default(cuid())
  videoId       String   @unique
  streamAssetId String?
  thumbnailUrl  String?
  hlsUrl        String?
  mp4Url        String?

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("video_assets")
}

model Collection {
  id        String   @id @default(cuid())
  ownerId   String
  title     String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  items   CollectionItem[]

  @@map("collections")
}

model CollectionItem {
  id           String @id @default(cuid())
  collectionId String
  videoId      String
  order        Int

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  video      Video      @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([collectionId, videoId])
  @@map("collection_items")
}

// Store & Wallet
model Store {
  id           String   @id @default(cuid())
  ownerId      String   @unique
  name         String
  externalLinks Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  owner    User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  products Product[]
  orders   Order[]

  @@map("stores")
}

model Product {
  id          String   @id @default(cuid())
  storeId     String
  title       String
  description String?
  priceTokens Int
  mediaUrl    String?
  stock       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store  Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders OrderItem[]

  @@map("products")
}

model Order {
  id        String   @id @default(cuid())
  buyerId   String
  storeId   String
  totalTokens Int
  status    OrderStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyer  User    @relation("Buyer", fields: [buyerId], references: [id])
  store  Store   @relation(fields: [storeId], references: [id])
  items  OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  priceTokens Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Token Economy
model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("wallets")
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  type        TransactionType
  amountTokens Int
  amountUSD   Decimal?
  targetType  String?
  targetId    String?
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime @default(now())

  user Wallet @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

enum TransactionType {
  PURCHASE
  TIP
  BOOST
  STORE
  MEMBERSHIP
  PAYOUT
  BONUS
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model TokenPackage {
  id        String   @id @default(cuid())
  title     String
  tokens    Int
  priceUSD  Decimal
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("token_packages")
}

// Memberships
model MembershipTier {
  id        String   @id @default(cuid())
  studioId  String
  name      String
  price     Decimal
  perks     Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studio     Studio       @relation(fields: [studioId], references: [id], onDelete: Cascade)
  memberships Membership[]

  @@map("membership_tiers")
}

model Membership {
  id        String   @id @default(cuid())
  studioId  String
  userId    String
  tierId    String
  status    MembershipStatus @default(ACTIVE)
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studio Studio        @relation(fields: [studioId], references: [id], onDelete: Cascade)
  tier   MembershipTier @relation(fields: [tierId], references: [id])

  @@unique([studioId, userId])
  @@map("memberships")
}

enum MembershipStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

// Admin & Moderation
model Report {
  id         String   @id @default(cuid())
  reporterId String
  targetType String
  targetId   String
  reason     ReportReason
  detail     String?
  status     ReportStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  reporter User @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

enum ReportReason {
  SPAM
  INAPPROPRIATE
  HARASSMENT
  COPYRIGHT
  VIOLENCE
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

model Ban {
  id        String   @id @default(cuid())
  userId    String
  reason    String
  expiresAt DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bans")
}

model FeatureFlag {
  key       String   @id
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feature_flags")
}

// Magic Link Tokens for Authentication
model MagicLinkToken {
  id         String   @id @default(cuid())
  token      String   @unique
  userId     String
  expiresAt  DateTime
  redirectUrl String?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("magic_link_tokens")
}

// Video Editor Models
model VideoProject {
  id                String   @id @default(cuid())
  userId            String
  name              String
  description       String?
  thumbnailUrl      String?
  settings          Json?
  isPublished       Boolean  @default(false)
  isCensored        Boolean  @default(false)
  contentRating     String   @default("PG-13")
  ageRestriction    String   @default("teen")
  isInappropriate   Boolean  @default(false)
  inappropriateReason String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  clips             VideoClip[]
  audioTracks       AudioTrack[]
  textOverlays      TextOverlay[]
  transitions       Transition[]
  exportJobs        VideoExportJob[]

  @@map("video_projects")
}

model VideoClip {
  id        String   @id @default(cuid())
  projectId String
  videoUrl  String
  startTime Float
  endTime   Float
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project VideoProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("video_clips")
}

model AudioTrack {
  id        String   @id @default(cuid())
  projectId String
  audioUrl  String
  startTime Float
  volume    Float    @default(1.0)
  duration  Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project VideoProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("audio_tracks")
}

model TextOverlay {
  id        String   @id @default(cuid())
  projectId String
  text      String
  startTime Float
  endTime   Float
  style     Json?
  positionX Float    @default(0)
  positionY Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project VideoProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("text_overlays")
}

model Transition {
  id        String   @id @default(cuid())
  projectId String
  type      String
  startTime Float
  duration  Float
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project VideoProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("transitions")
}

model VideoExportJob {
  id          String   @id @default(cuid())
  projectId   String
  userId      String
  format      String
  quality     String   @default("1080p")
  settings    Json?
  status      String   @default("pending")
  progress    Int      @default(0)
  downloadUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project VideoProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("video_export_jobs")
}

model VideoTemplate {
  id           String   @id @default(cuid())
  userId       String
  name         String
  description  String
  thumbnailUrl String?
  category     String
  settings     Json
  isPublic     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("video_templates")
}

// Console Integration Models
model ConsoleIntegration {
  id         String   @id @default(cuid())
  userId     String
  platform   String
  apiKey     String
  webhookUrl String?
  settings   Json?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  syncLogs   ConsoleSyncLog[]

  @@map("console_integrations")
}

model ConsoleSyncLog {
  id                    String   @id @default(cuid())
  consoleIntegrationId  String
  status               String
  productsSynced       Int      @default(0)
  ordersSynced         Int      @default(0)
  errors               Json?
  createdAt            DateTime @default(now())

  integration ConsoleIntegration @relation(fields: [consoleIntegrationId], references: [id], onDelete: Cascade)

  @@map("console_sync_logs")
}

// Content Reports for Moderation
model ContentReport {
  id         String   @id @default(cuid())
  reporterId String
  contentType String
  contentId  String
  reason     String
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("content_reports")
}

// Follow/Tune-In System
model TuneIn {
  id         String   @id @default(cuid())
  followerId String
  followedId String
  createdAt  DateTime @default(now())

  follower User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followed User @relation("Followed", fields: [followedId], references: [id], onDelete: Cascade)

  @@unique([followerId, followedId])
  @@map("tune_ins")
}

// Video Boost (Like) System
model VideoBoost {
  id      String   @id @default(cuid())
  userId  String
  videoId String
  type    BoostType @default(BOOST)
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("video_boosts")
}

enum BoostType {
  BOOST
  DISLIKE
}

// Video Chat (Comments) System
model VideoChat {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  text      String
  parentId  String?
  isEdited  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  video   Video       @relation(fields: [videoId], references: [id], onDelete: Cascade)
  parent  VideoChat?  @relation("ChatReplies", fields: [parentId], references: [id])
  replies VideoChat[] @relation("ChatReplies")

  @@map("video_chats")
}

// Notifications System
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  TUNE_IN
  BOOST
  CHAT
  BROADCAST
  CREW_UPDATE
  SYSTEM
}
