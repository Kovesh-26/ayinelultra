// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================
// Core Models
// =============================

enum Role {
  USER
  CREATOR
  ADMIN
}

enum VideoType {
  FLIP
  BROADCAST
}

enum Visibility {
  PUBLIC
  UNLISTED
  PRIVATE
}

enum ProductType {
  PHYSICAL
  DIGITAL
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
  REFUNDED
}

enum ConversationRole {
  MEMBER
  ADMIN
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum KidAgeGroup {
  AGE_3_5
  AGE_6_8
  AGE_9_12
}

enum ContentRating {
  G
  PG
  PG13
  R
  NC17
  UNRATED
}

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  username     String      @unique
  displayName  String?
  bio          String?
  avatarUrl    String?
  bannerUrl    String?
  role         Role        @default(USER)
  isCreator    Boolean     @default(false)
  dateOfBirth  DateTime?
  isMinor      Boolean     @default(false)
  guardianEmail String?
  guardianVerifiedAt DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  studios        Studio[]
  videos         Video[]    @relation("UserVideos")
  playlists      Playlist[]
  tracks         MusicTrack[]
  photos         Photo[]
  boosts         Boost[]
  followers      Follow[]   @relation("followee")
  following      Follow[]   @relation("follower")
  // friendships are undirected (two columns)
  friendsA       Friendship[] @relation("friendsA")
  friendsB       Friendship[] @relation("friendsB")

  // chat
  messages       Message[]
  conversations  ConversationParticipant[]

  // commerce
  products   Product[]
  orders     Order[]
  collections Collection[]

  // KidZone
  kidProfiles KidProfile[]
  kidSettings KidSettings?

  // New relations
  addresses Address[]
  payouts Payout[]
  reports Report[] @relation("ReportReporter")
  appeals Appeal[]
  crew Crew[]

  @@map("users")
}

model Studio {
  id          String     @id @default(cuid())
  ownerId     String
  name        String
  description String?
  isFamilyFriendly Boolean @default(false)
  kidzoneVisible  Boolean @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  videos      Video[]
  collections Collection[]
  store       Store?
  media       Media[]
  crew        Crew[]
  chatRooms   ChatRoom[]
  newsletters Newsletter[]

  @@index([ownerId])
  @@map("studios")
}

model Video {
  id          String     @id @default(cuid())
  ownerId     String
  studioId    String?
  type        VideoType  @default(FLIP)
  title       String
  description String?
  durationSec Int?
  playbackId  String?    // from Mux/Cloudflare Stream
  visibility  Visibility @default(PUBLIC)
  contentRating ContentRating @default(UNRATED)
  isKidSafe   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  owner       User       @relation(name: "UserVideos", fields: [ownerId], references: [id], onDelete: Cascade)
  studio      Studio?    @relation(fields: [studioId], references: [id])
  boosts      Boost[]
  categories  VideoCategoryOnVideo[]
  collections CollectionItem[]

  @@index([ownerId])
  @@index([studioId])
  @@map("videos")
}

model Category {
  id    String @id @default(cuid())
  slug  String @unique
  name  String @unique
  videos VideoCategoryOnVideo[]

  @@map("categories")
}

model VideoCategoryOnVideo {
  videoId    String
  categoryId String
  assignedAt DateTime @default(now())

  video    Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([videoId, categoryId])
  @@map("video_categories")
}

model Collection {
  id        String   @id @default(cuid())
  title     String
  isPublic  Boolean  @default(true)
  studioId  String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studio   Studio? @relation(fields: [studioId], references: [id])
  user     User?   @relation(fields: [userId], references: [id])
  items    CollectionItem[]

  @@index([userId])
  @@map("collections")
}

model CollectionItem {
  collectionId String
  videoId      String
  order        Int     @default(0)

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  video      Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@id([collectionId, videoId])
  @@map("collection_items")
}

model MusicTrack {
  id        String   @id @default(cuid())
  userId    String
  title     String
  url       String?
  duration  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlists PlaylistTrack[]

  @@index([userId])
  @@map("music_tracks")
}

model Playlist {
  id        String   @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tracks PlaylistTrack[]

  @@map("playlists")
}

model PlaylistTrack {
  playlistId String
  trackId    String
  order      Int @default(0)

  playlist Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  track    MusicTrack @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@id([playlistId, trackId])
  @@map("playlist_tracks")
}

model Photo {
  id        String   @id @default(cuid())
  userId    String
  url       String
  caption   String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("photos")
}

model Boost {
  id        String   @id @default(cuid())
  userId    String
  videoId   String?
  productId String?
  amount    Int      @default(0) // cents or points
  createdAt DateTime @default(now())

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  video   Video? @relation(fields: [videoId], references: [id])
  product Product? @relation(fields: [productId], references: [id])

  @@map("boosts")
}

model Follow {
  followerId String
  followeeId String
  createdAt  DateTime @default(now())

  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followee User @relation("followee", fields: [followeeId], references: [id], onDelete: Cascade)

  @@id([followerId, followeeId])
  @@map("follows")
}

model Friendship {
  id      String           @id @default(cuid())
  aId     String
  bId     String
  status  FriendshipStatus @default(PENDING)
  createdAt DateTime       @default(now())

  a User @relation("friendsA", fields: [aId], references: [id], onDelete: Cascade)
  b User @relation("friendsB", fields: [bId], references: [id], onDelete: Cascade)

  @@unique([aId, bId])
  @@map("friendships")
}

model Conversation {
  id          String      @id @default(cuid())
  isGroup     Boolean     @default(false)
  createdAt   DateTime    @default(now())
  participants ConversationParticipant[]
  messages    Message[]

  @@map("conversations")
}

model ConversationParticipant {
  conversationId String
  userId         String
  role           ConversationRole @default(MEMBER)
  joinedAt       DateTime         @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Store {
  id        String   @id @default(cuid())
  studioId  String   @unique
  currency  String   @default("USD")
  products  Product[]
  orders    Order[]

  studio Studio @relation(fields: [studioId], references: [id], onDelete: Cascade)

  @@map("stores")
}

model Product {
  id          String      @id @default(cuid())
  storeId     String
  title       String
  description String?
  priceCents  Int
  type        ProductType @default(PHYSICAL)
  imageUrl    String?
  inStock     Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  store      Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  boosts     Boost[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@index([storeId])
  @@index([userId])
  @@map("products")
}

model Order {
  id        String      @id @default(cuid())
  buyerId   String
  storeId   String
  status    OrderStatus @default(PENDING)
  totalCents Int        @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  buyer User  @relation(fields: [buyerId], references: [id])
  store Store @relation(fields: [storeId], references: [id])
  items OrderItem[]

  @@index([buyerId])
  @@index([storeId])
  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int    @default(1)
  priceCents Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model KidProfile {
  id          String      @id @default(cuid())
  guardianId  String
  displayName String
  ageGroup    KidAgeGroup
  avatarUrl   String?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  guardian User @relation(fields: [guardianId], references: [id], onDelete: Cascade)

  @@index([guardianId])
  @@map("kid_profiles")
}

model KidSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  safeSearch    Boolean  @default(true)
  maxRating     ContentRating @default(PG13)
  chatEnabled   Boolean  @default(false)
  dmsEnabled    Boolean  @default(false)
  tuneInAllowed Boolean  @default(true)
  timeLimitsMin Int?     // optional daily limit
  blockedTags   String[] @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("kid_settings")
}

model Media {
  id            String      @id @default(cuid())
  kind          String      // "video" or "audio"
  studio        Studio      @relation(fields: [studioId], references: [id])
  studioId      String
  title         String
  description   String?
  tags          String[]    @db.Text
  durationSec   Int?
  hlsUrl        String?
  dashUrl       String?
  thumbUrl      String?
  sourceUrl     String?
  contentRating ContentRating @default(UNRATED)
  isKidSafe     Boolean     @default(false)
  publishedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([studioId])
  @@index([publishedAt])
  @@index([tags])
  @@map("media")
}

model Crew {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  studio    Studio  @relation(fields: [studioId], references: [id])
  studioId  String
  tier      String? // e.g., "Free", "Member", "VIP"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, studioId])
  @@index([studioId])
  @@map("crew")
}

model ChatRoom {
  id       String       @id @default(cuid())
  kind     String       // "dm", "fan", "broadcast"
  title    String?
  studio   Studio?      @relation(fields: [studioId], references: [id])
  studioId String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([studioId])
  @@map("chat_rooms")
}

model Address {
  id          String  @id @default(cuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  name        String
  line1       String
  line2       String?
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("addresses")
}

model Payout {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amountCents Int
  status      String   // "pending", "processing", "completed", "failed"
  method      String   // "bank", "paypal", "stripe"
  reference   String?  // external reference
  processedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@map("payouts")
}

model Report {
  id          String   @id @default(cuid())
  reporterId  String
  reporter    User     @relation("ReportReporter", fields: [reporterId], references: [id])
  reportedId  String?  // user, studio, or media ID
  type        String   // "user", "studio", "media", "message"
  reason      String
  description String?
  status      String   @default("pending") // "pending", "reviewed", "resolved", "dismissed"
  reviewedBy  String?
  reviewedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([reporterId])
  @@index([status])
  @@map("reports")
}

model Appeal {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  reportId    String?
  type        String   // "ban", "strike", "content_removal"
  reason      String
  description String
  status      String   @default("pending") // "pending", "approved", "denied"
  reviewedBy  String?
  reviewedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@map("appeals")
}

model FeatureFlag {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  enabled     Boolean  @default(false)
  rollout     Int      @default(0) // percentage 0-100
  conditions  Json?    // targeting conditions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("feature_flags")
}

model Newsletter {
  id          String   @id @default(cuid())
  studioId    String
  studio      Studio   @relation(fields: [studioId], references: [id])
  subject     String
  content     String
  status      String   @default("draft") // "draft", "scheduled", "sent"
  scheduledAt DateTime?
  sentAt      DateTime?
  recipients  Int      @default(0)
  opens       Int      @default(0)
  clicks      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([studioId])
  @@index([status])
  @@map("newsletters")
}

model ModerationQueue {
  id          String   @id @default(cuid())
  type        String   // "media", "message", "profile"
  targetId    String
  reason      String
  priority    String   @default("normal") // "low", "normal", "high", "urgent"
  status      String   @default("pending") // "pending", "reviewed", "approved", "rejected"
  reviewedBy  String?
  reviewedAt  DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([status])
  @@index([priority])
  @@map("moderation_queue")
}
